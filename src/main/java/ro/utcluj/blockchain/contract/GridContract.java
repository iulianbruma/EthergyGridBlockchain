package ro.utcluj.blockchain.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticArray;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.StaticArray32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class GridContract extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b506301312d0061001e610116565b9081526060602082018190526007908201527f4574686572677900000000000000000000000000000000000000000000000000608082015260a060408083018290526003918301919091527f455447000000000000000000000000000000000000000000000000000000000060c0830152519081900360e001906000f0801580156100ad573d6000803e3d6000fd5b5060008054600160a060020a031916600160a060020a0392831617908190556040805191909216815290517ff6259b05b6581f493fc4f205bdf91ee0537a7238ac046ba51477ec360980f1d4916020908290030190a1610123805460ff19166001179055610126565b60405161050b80612be383390190565b612aae806101356000396000f300608060405260043610620001495763ffffffff60e060020a600035041663193f974c81146200014e578063205bbe201462000177578063368f89df14620002c45780634773489214620002f15780636253a7fd146200031557806363d6db0a146200033057806369ee73e214620003835780637324bbcf146200039b5780637bfb961e14620003b95780637c14abdd14620003e7578063819578e814620003ff5780638e3d489e1462000417578063925f87bf14620004325780639ea5f129146200044a578063a58e2cae14620004f2578063b970c3ab1462000588578063bd526c0c14620005a0578063c65b838e14620005b8578063cf34cde6146200060c578063d06787ef1462000633578063db22475014620006c9578063e43fbbe214620006e1578063e95aebf614620006f9578063fb8b68b21462000711578063fcdef57c146200072c575b600080fd5b3480156200015b57600080fd5b5062000175600160a060020a036004351660243562000879565b005b3480156200018457600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526200017594369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805161040081810190925295989796818101969550935060209250849150839080828437505060408051610400818101909252949796958181019594509250602091508390839080828437505060408051610400818101909252949796958181019594509250602091508390839080828437509396506200090295505050505050565b348015620002d157600080fd5b50620002df60043562000c7c565b60408051918252519081900360200190f35b348015620002fe57600080fd5b50620002df600160a060020a036004351662000c91565b3480156200032257600080fd5b50620002df60043562000d30565b3480156200033d57600080fd5b506200034862000d3e565b604051808261040080838360005b838110156200037057818101518382015260200162000356565b5050505090500191505060405180910390f35b3480156200039057600080fd5b506200034862000d93565b348015620003a857600080fd5b506200017560043560243562000de2565b348015620003c657600080fd5b50620003d162000dfd565b6040805160ff9092168252519081900360200190f35b348015620003f457600080fd5b506200034862000e07565b3480156200040c57600080fd5b506200034862000e56565b3480156200042457600080fd5b506200017560043562000ea5565b3480156200043f57600080fd5b506200034862000f5d565b3480156200045757600080fd5b5060408051610400808201909252620001759160048035600160a060020a0316926024351515923692916104449160449060209083908390808284375050604080516104008181019092529497969581810195945092506020915083908390808284375050604080516104008181019092529497969581810195945092506020915083908390808284375093965062000fa995505050505050565b348015620004ff57600080fd5b506040805161040081810190925262000175913691600491610404919083906020908390839080828437505060408051610400818101909252949796958181019594509250602091508390839080828437505060408051610400818101909252949796958181019594509250602091508390839080828437509396506200118d95505050505050565b3480156200059557600080fd5b5062000348620012b7565b348015620005ad57600080fd5b506200034862001303565b60408051610c00818101909252620005f59160048035923692610c2491906024906060908390839080828437509396506200135295505050505050565b604051815181528082610100808383602062000356565b3480156200061957600080fd5b5062000175600160a060020a03600435166024356200147a565b3480156200064057600080fd5b50604080516104008181019092526200017591369160049161040491908390602090839083908082843750506040805161040081810190925294979695818101959450925060209150839083908082843750506040805161040081810190925294979695818101959450925060209150839083908082843750939650620014e695505050505050565b348015620006d657600080fd5b506200034862001611565b348015620006ee57600080fd5b506200034862001660565b3480156200070657600080fd5b5062000175620016ac565b3480156200071e57600080fd5b50620002df600435620016f6565b3480156200073957600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526200017594369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805161040081810190925295989796818101969550935060209250849150839080828437505060408051610400818101909252949796958181019594509250602091508390839080828437505060408051610400818101909252949796958181019594509250602091508390839080828437509396506200170495505050505050565b60008054604080517ff5d82b6b000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482018690529151919092169263f5d82b6b926044808201939182900301818387803b158015620008e557600080fd5b505af1158015620008fa573d6000803e3d6000fd5b505050505050565b6200090c620019f9565b6000805b6020821015620009a6578582602081106200092757fe5b60200201518383606081106200093957fe5b60200201818152505084826020811015156200095157fe5b602002015183836020016060811015156200096857fe5b60200201818152505083826020811015156200098057fe5b60200201518360408401606081106200099557fe5b602002015260019091019062000910565b888888600586620009b662001a19565b606081018390528060208101604082016080830185610c0080838360005b83811015620009ee578181015183820152602001620009d4565b50505050905001848103845289818151815260200191508051906020019080838360005b8381101562000a2c57818101518382015260200162000a12565b50505050905090810190601f16801562000a5a5780820380516001836020036101000a031916815260200191505b5084810383528851815288516020918201918a019080838360005b8381101562000a8f57818101518382015260200162000a75565b50505050905090810190601f16801562000abd5780820380516001836020036101000a031916815260200191505b50848103825287518152875160209182019189019080838360005b8381101562000af257818101518382015260200162000ad8565b50505050905090810190601f16801562000b205780820380516001836020036101000a031916815260200191505b5098505050505050505050604051809103906000f08015801562000b48573d6000803e3d6000fd5b5033600160a060020a038181166000908152600160205260409020805473ffffffffffffffffffffffffffffffffffffffff191691841691909117905590915062000b96906103e862000879565b80600160a060020a0316638caa872e62000bb4610122548662001352565b60405160e060020a63ffffffff8416028152600401808261010080838360005b8381101562000bee57818101518382015260200162000bd4565b50505050905001915050600060405180830381600087803b15801562000c1357600080fd5b505af115801562000c28573d6000803e3d6000fd5b505060408051600160a060020a0380861682523316602082015281517f138fd64d295f016cdf9ada3f3a2d7a59e66e20b2de511d22533938407ab3f10e9450908190039091019150a1505050505050505050565b6002816060811062000c8a57fe5b0154905081565b60008054604080517f47734892000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015291519190921691634773489291602480830192602092919082900301818787803b15801562000cfa57600080fd5b505af115801562000d0f573d6000803e3d6000fd5b505050506040513d602081101562000d2657600080fd5b505190505b919050565b60c2816060811062000c8a57fe5b62000d4862001a2a565b62000d5262001a2a565b60005b602081101562000d8d5760c2602082016060811062000d7057fe5b015482826020811062000d7f57fe5b602002015260010162000d55565b50919050565b62000d9d62001a2a565b62000da762001a2a565b60005b602081101562000d8d5760c2604082016060811062000dc557fe5b015482826020811062000dd457fe5b602002015260010162000daa565b8060c2836060811062000df157fe5b01805490910190555050565b6101235460ff1690565b62000e1162001a2a565b62000e1b62001a2a565b60005b602081101562000d8d576062604082016060811062000e3957fe5b015482826020811062000e4857fe5b602002015260010162000e1e565b62000e6062001a2a565b62000e6a62001a2a565b60005b602081101562000d8d576002602082016060811062000e8857fe5b015482826020811062000e9757fe5b602002015260010162000e6d565b60006101225482118062000ec657508115801562000ec6575061012254605f145b1562000f5957600360c26101225460608110151562000ee157fe5b015481151562000eed57fe5b0590508060c2836060811062000eff57fe5b01805490910190558060c2600184016060811062000f1957fe5b01805490910190558060c2600284016060811062000f3357fe5b01805490910190556101225460009060c2906060811062000f5057fe5b01556101228290555b5050565b62000f6762001a2a565b62000f7162001a2a565b60005b602081101562000d8d576002816060811062000f8c57fe5b015482826020811062000f9b57fe5b602002015260010162000f74565b62000fb3620019f9565b60005b6020811015620010495784816020811062000fcd57fe5b602002015182826060811062000fdf57fe5b602002018181525050838160208110151562000ff757fe5b602002015182826020016060811015156200100e57fe5b60200201818152505082816020811015156200102657fe5b60200201518260408301606081106200103b57fe5b602002015260010162000fb6565b8515620010ea5786600160a060020a0316638caa872e6200106c60008562001352565b60405160e060020a63ffffffff8416028152600401808261010080838360005b83811015620010a65781810151838201526020016200108c565b50505050905001915050600060405180830381600087803b158015620010cb57600080fd5b505af1158015620010e0573d6000803e3d6000fd5b5050505062001184565b86600160a060020a0316638caa872e6200110b610122546001018562001352565b60405160e060020a63ffffffff8416028152600401808261010080838360005b83811015620011455781810151838201526020016200112b565b50505050905001915050600060405180830381600087803b1580156200116a57600080fd5b505af11580156200117f573d6000803e3d6000fd5b505050505b50505050505050565b62001197620019f9565b600080805b60208310156200123257868360208110620011b357fe5b6020020151848460608110620011c557fe5b6020020181815250508583602081101515620011dd57fe5b60200201518484602001606081101515620011f457fe5b60200201818152505084836020811015156200120c57fe5b60200201518460408501606081106200122157fe5b60200201526001909201916200119c565b600091505b606082101562001276578382606081106200124e57fe5b6020020151606283606081106200126157fe5b01805490910190556001919091019062001237565b50610122545b606081101562001184578381606081106200129357fe5b602002015160c28260608110620012a657fe5b01805490910190556001016200127c565b620012c162001a2a565b620012cb62001a2a565b60005b602081101562000d8d5760628160608110620012e657fe5b0154828260208110620012f557fe5b6020020152600101620012ce565b6200130d62001a2a565b6200131762001a2a565b60005b602081101562000d8d57600260408201606081106200133557fe5b01548282602081106200134457fe5b60200201526001016200131a565b6200135c62001a4a565b60006200136862001a4a565b6000915084825b866008018210156200146f576200139560c283606081106200138d57fe5b0154620019de565b6004878460608110620013a457fe5b6020020151811515620013b357fe5b0412620013d05760c28260608110620013c857fe5b01546200141e565b620013e260c283606081106200138d57fe5b60c28360608110620013f057fe5b0154811515620013fc57fe5b0560048784606081106200140c57fe5b60200201518115156200141b57fe5b04025b9050808683606081106200142e57fe5b6020020151018385600881106200144157fe5b60200201528060c283606081106200145557fe5b01805491909103905560019384019391909101906200136f565b509095945050505050565b60008054604080517ff3fef3a3000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482018690529151919092169263f3fef3a3926044808201939182900301818387803b158015620008e557600080fd5b620014f0620019f9565b600080805b60208310156200158b578683602081106200150c57fe5b60200201518484606081106200151e57fe5b60200201818152505085836020811015156200153657fe5b602002015184846020016060811015156200154d57fe5b60200201818152505084836020811015156200156557fe5b60200201518460408501606081106200157a57fe5b6020020152600190920191620014f5565b600091505b6060821015620015cf57838260608110620015a757fe5b602002015160028360608110620015ba57fe5b01805490910190556001919091019062001590565b50610122545b60608110156200118457838160608110620015ec57fe5b602002015160c28260608110620015ff57fe5b018054919091039055600101620015d5565b6200161b62001a2a565b6200162562001a2a565b60005b602081101562000d8d57606260208201606081106200164357fe5b01548282602081106200165257fe5b602002015260010162001628565b6200166a62001a2a565b6200167462001a2a565b60005b602081101562000d8d5760c281606081106200168f57fe5b01548282602081106200169e57fe5b602002015260010162001677565b60005b6060811015620016f35760028160608110620016c757fe5b015460628260608110620016d757fe5b01540360c28260608110620016e857fe5b0155600101620016af565b50565b6062816060811062000c8a57fe5b6200170e620019f9565b6000805b6020821015620017a8578582602081106200172957fe5b60200201518383606081106200173b57fe5b60200201818152505084826020811015156200175357fe5b602002015183836020016060811015156200176a57fe5b60200201818152505083826020811015156200178257fe5b60200201518360408401606081106200179757fe5b602002015260019091019062001712565b88888885620017b662001a6a565b8060208101604082016060830185610c0080838360005b83811015620017e7578181015183820152602001620017cd565b50505050905001848103845288818151815260200191508051906020019080838360005b83811015620018255781810151838201526020016200180b565b50505050905090810190601f168015620018535780820380516001836020036101000a031916815260200191505b50848103835287518152875160209182019189019080838360005b83811015620018885781810151838201526020016200186e565b50505050905090810190601f168015620018b65780820380516001836020036101000a031916815260200191505b50848103825286518152865160209182019188019080838360005b83811015620018eb578181015183820152602001620018d1565b50505050905090810190601f168015620019195780820380516001836020036101000a031916815260200191505b50975050505050505050604051809103906000f08015801562001940573d6000803e3d6000fd5b5033600160a060020a038181166000908152600160205260409020805473ffffffffffffffffffffffffffffffffffffffff19169184169190911790559091506200198e906103e862000879565b60408051600160a060020a0380841682523316602082015281517f138fd64d295f016cdf9ada3f3a2d7a59e66e20b2de511d22533938407ab3f10e929181900390910190a1505050505050505050565b600080821215620019f55781600003905062000d2b565b5090565b610c00604051908101604052806060906020820280388339509192915050565b6040516109098062001a7c83390190565b610400604051908101604052806020906020820280388339509192915050565b610100604051908101604052806008906020820280388339509192915050565b6040516106fe8062002385833901905600608060405234801561001057600080fd5b50604051610909380380610909833981016040908152815160208301519183015160608085015160008054600160a060020a03338116600160a060020a031992831617909255600180543290931692909116919091179055600a819055928501949384019391820192916080019061008c90600b9083906100d3565b5084516100a090606b906020880190610111565b5083516100b490606c906020870190610111565b5082516100c890606d906020860190610111565b50505050505061019b565b8260608101928215610101579160200282015b828111156101015782518255916020019190600101906100e6565b5061010d92915061017e565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015257805160ff1916838001178555610101565b8280016001018555821561010157918201828111156101015782518255916020019190600101906100e6565b61019891905b8082111561010d5760008155600101610184565b90565b61075f806101aa6000396000f30060806040526004361061008d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312065fe081146100925780631e979f23146100b95780633297fc00146100d65780638caa872e14610124578063967020be14610169578063c12cfa631461017e578063c2614831146101bc578063d73e8d42146101d1575b600080fd5b34801561009e57600080fd5b506100a76101fc565b60408051918252519081900360200190f35b3480156100c557600080fd5b506100d46004356024356102a6565b005b3480156100e257600080fd5b506100eb61053d565b604051808261040080838360005b838110156101115781810151838201526020016100f9565b5050505090500191505060405180910390f35b34801561013057600080fd5b50604080516101008181019092526100d49136916004916101049190839060089083908390808284375093965061058a95505050505050565b34801561017557600080fd5b506100eb61059b565b34801561018a57600080fd5b506101936105e2565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156101c857600080fd5b506100eb6105fe565b3480156101dd57600080fd5b506101e6610642565b60405181518152808261010080838360206100f9565b60008054600154604080517f4773489200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015290519190921691634773489291602480830192602092919082900301818787803b15801561027457600080fd5b505af1158015610288573d6000803e3d6000fd5b505050506040513d602081101561029e57600080fd5b505190505b90565b60078116600080808080600286600881106102bd57fe5b015494506102db85896064028115156102d257fe5b0460640361067e565b600a5490945060019350841161033b5760408051878152602081018790528082018a90529051600260ff86168b020493507f9a81468e96422914fe2dffa77b0ee96f4e6b99652f6d910ee02fbeaba97a32da9181900360600190a161041a565b505060008054604080517f7324bbcf0000000000000000000000000000000000000000000000000000000081526004810189905289870360248201819052915160ff86168b0260020294929373ffffffffffffffffffffffffffffffffffffffff1692637324bbcf926044808201939182900301818387803b1580156103c057600080fd5b505af11580156103d4573d6000803e3d6000fd5b505060408051898152602081018990528082018c905290517f0b5cffbf550b354b6e18c044f10597ef01d1ffddbb536fffdf7d94012cfc1bcb9350908190036060019150a15b60008054604080517f8e3d489e000000000000000000000000000000000000000000000000000000008152600481018b9052905173ffffffffffffffffffffffffffffffffffffffff90921692638e3d489e9260248084019382900301818387803b15801561048857600080fd5b505af115801561049c573d6000803e3d6000fd5b505060008054600154604080517fcf34cde600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015260248101899052905191909216945063cf34cde693506044808301939282900301818387803b15801561051b57600080fd5b505af115801561052f573d6000803e3d6000fd5b505050505050505050505050565b61054561069b565b61054d61069b565b60005b602081101561058457600b604082016060811061056957fe5b015482826020811061057757fe5b6020020152600101610550565b50919050565b61059760028260086106bb565b5050565b6105a361069b565b6105ab61069b565b60005b602081101561058457600b60208201606081106105c757fe5b01548282602081106105d557fe5b60200201526001016105ae565b60015473ffffffffffffffffffffffffffffffffffffffff1690565b61060661069b565b61060e61069b565b60005b602081101561058457600b816060811061062757fe5b015482826020811061063557fe5b6020020152600101610611565b61064a6106f9565b604080516101008101918290529060029060089082845b815481526020019060010190808311610661575050505050905090565b60008082101561069357816000039050610696565b50805b919050565b610400604051908101604052806020906020820280388339509192915050565b82600881019282156106e9579160200282015b828111156106e95782518255916020019190600101906106ce565b506106f5929150610719565b5090565b610100604051908101604052806008906020820280388339509192915050565b6102a391905b808211156106f5576000815560010161071f5600a165627a7a7230582052572e597bd402abc3a8349c5b27bb0699a70c71a65a81331d1b753e556cfaed0029608060405234801561001057600080fd5b506040516106fe3803806106fe833981016040908152815160208301519183015160008054600160a060020a03338116600160a060020a0319928316179092556001805432909316929091169190911790559083019291820191908101906060908101906100829060029083906100c8565b508351610096906062906020870190610106565b5082516100aa906063906020860190610106565b5081516100be906064906020850190610106565b5050505050610190565b82606081019282156100f6579160200282015b828111156100f65782518255916020019190600101906100db565b50610102929150610173565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014757805160ff19168380011785556100f6565b828001600101855582156100f657918201828111156100f65782518255916020019190600101906100db565b61018d91905b808211156101025760008155600101610179565b90565b61055f8061019f6000396000f30060806040526004361061006c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166311d62e71811461007157806312065fe0146100bf578063465585e2146100e6578063bb9ef60114610103578063fcd9c2e214610118575b600080fd5b34801561007d57600080fd5b5061008661012d565b604051808261040080838360005b838110156100ac578181015183820152602001610094565b5050505090500191505060405180910390f35b3480156100cb57600080fd5b506100d461017a565b60408051918252519081900360200190f35b3480156100f257600080fd5b50610101600435602435610223565b005b34801561010f57600080fd5b50610086610488565b34801561012457600080fd5b506100866104cc565b610135610513565b61013d610513565b60005b6020811015610174576002604082016060811061015957fe5b015482826020811061016757fe5b6020020152600101610140565b50919050565b60008054600154604080517f4773489200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015290519190921691634773489291602480830192602092919082900301818787803b1580156101f257600080fd5b505af1158015610206573d6000803e3d6000fd5b505050506040513d602081101561021c57600080fd5b5051905090565b6001826000806002856060811061023657fe5b0154915050808503600381138061024e575060021981125b156103265760008054604080517f7324bbcf0000000000000000000000000000000000000000000000000000000081526004810189905260248101859052905173ffffffffffffffffffffffffffffffffffffffff90921692637324bbcf9260448084019382900301818387803b1580156102c857600080fd5b505af11580156102dc573d6000803e3d6000fd5b505060408051888152602081018690528082018a905290517f0b5cffbf550b354b6e18c044f10597ef01d1ffddbb536fffdf7d94012cfc1bcb9350908190036060019150a1610367565b604080518681526020810184905280820188905290517f9a81468e96422914fe2dffa77b0ee96f4e6b99652f6d910ee02fbeaba97a32da9181900360600190a15b60008054604080517f8e3d489e00000000000000000000000000000000000000000000000000000000815260048101899052905173ffffffffffffffffffffffffffffffffffffffff90921692638e3d489e9260248084019382900301818387803b1580156103d557600080fd5b505af11580156103e9573d6000803e3d6000fd5b505060008054600154604080517f193f974c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152602481018a9052905191909216945063193f974c93506044808301939282900301818387803b15801561046857600080fd5b505af115801561047c573d6000803e3d6000fd5b50505050505050505050565b610490610513565b610498610513565b60005b602081101561017457600281606081106104b157fe5b01548282602081106104bf57fe5b602002015260010161049b565b6104d4610513565b6104dc610513565b60005b602081101561017457600260208201606081106104f857fe5b015482826020811061050657fe5b60200201526001016104df565b6104006040519081016040528060209060208202803883395091929150505600a165627a7a72305820f2a4a75bad8b39ab425f694182f1cf2c04e22dee77084ca60739262079ba99ca0029a165627a7a72305820b6baeea3b1c05b2c699051afc6b43028fae86ae70d7cdf7dc6b35cd11f3f9110002960806040526002805460ff1916601217905534801561001d57600080fd5b5060405161050b38038061050b8339810160409081528151602080840151838501516002805433600160a060020a031660008181526003875297882060ff909216600a0a8702909155815461010060a860020a031916610100909102179055908501805193959094910192610094928501906100b1565b5080516100a89060019060208401906100b1565b5050505061014c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f257805160ff191683800117855561011f565b8280016001018555821561011f579182015b8281111561011f578251825591602001919060010190610104565b5061012b92915061012f565b5090565b61014991905b8082111561012b5760008155600101610135565b90565b6103b08061015b6000396000f3006080604052600436106100825763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610087578063313ce56714610111578063477348921461013c57806370a082311461016f57806395d89b4114610190578063f3fef3a3146101a5578063f5d82b6b146101cb575b600080fd5b34801561009357600080fd5b5061009c6101ef565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100d65781810151838201526020016100be565b50505050905090810190601f1680156101035780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561011d57600080fd5b5061012661027d565b6040805160ff9092168252519081900360200190f35b34801561014857600080fd5b5061015d600160a060020a0360043516610286565b60408051918252519081900360200190f35b34801561017b57600080fd5b5061015d600160a060020a03600435166102a1565b34801561019c57600080fd5b5061009c6102b3565b3480156101b157600080fd5b506101c9600160a060020a036004351660243561030d565b005b3480156101d757600080fd5b506101c9600160a060020a0360043516602435610348565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102755780601f1061024a57610100808354040283529160200191610275565b820191906000526020600020905b81548152906001019060200180831161025857829003601f168201915b505050505081565b60025460ff1681565b600160a060020a031660009081526003602052604090205490565b60036020526000908152604090205481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102755780601f1061024a57610100808354040283529160200191610275565b600160a060020a0391821660009081526003602052604080822080548490039055600254610100900490931681529190912080549091019055565b600254600160a060020a0361010090910481166000908152600360205260408082208054859003905593909116815291909120805490910190555600a165627a7a72305820b0da9a31d726d36058a030f84c5dc64db5a2e69163b51a57d98b16edf0b7d7300029";

    protected GridContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected GridContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<NewCurveEventResponse> getNewCurveEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewCurve", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray<Uint256>>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<NewCurveEventResponse> responses = new ArrayList<NewCurveEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            NewCurveEventResponse typedResponse = new NewCurveEventResponse();
            typedResponse._curve = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewCurveEventResponse> newCurveEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewCurve", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray<Uint256>>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewCurveEventResponse>() {
            @Override
            public NewCurveEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                NewCurveEventResponse typedResponse = new NewCurveEventResponse();
                typedResponse._curve = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<GenerateAddressEventResponse> getGenerateAddressEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("GenerateAddress", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<GenerateAddressEventResponse> responses = new ArrayList<GenerateAddressEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            GenerateAddressEventResponse typedResponse = new GenerateAddressEventResponse();
            typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.msg_sender = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<GenerateAddressEventResponse> generateAddressEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("GenerateAddress", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, GenerateAddressEventResponse>() {
            @Override
            public GenerateAddressEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                GenerateAddressEventResponse typedResponse = new GenerateAddressEventResponse();
                typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.msg_sender = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<EthergyAddressEventResponse> getEthergyAddressEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("EthergyAddress", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<EthergyAddressEventResponse> responses = new ArrayList<EthergyAddressEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            EthergyAddressEventResponse typedResponse = new EthergyAddressEventResponse();
            typedResponse._addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<EthergyAddressEventResponse> ethergyAddressEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("EthergyAddress", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, EthergyAddressEventResponse>() {
            @Override
            public EthergyAddressEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                EthergyAddressEventResponse typedResponse = new EthergyAddressEventResponse();
                typedResponse._addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> giveToken(String _user, BigInteger _amount) {
        Function function = new Function(
                "giveToken", 
                Arrays.<Type>asList(new Address(_user),
                new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registerConsumer(String _name, String _homeAddress, String _CNP, List<BigInteger> _firstExpectedConsumption, List<BigInteger> _secondExpectedConsumption, List<BigInteger> _thirdExpectedConsumption) {
        Function function = new Function(
                "registerConsumer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_homeAddress), 
                new org.web3j.abi.datatypes.Utf8String(_CNP), 
                new StaticArray32<Uint256>(
                        org.web3j.abi.Utils.typeMap(_firstExpectedConsumption, Uint256.class)),
                new StaticArray32<Uint256>(
                        org.web3j.abi.Utils.typeMap(_secondExpectedConsumption, Uint256.class)),
                new StaticArray32<Uint256>(
                        org.web3j.abi.Utils.typeMap(_thirdExpectedConsumption, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> demandCurve(BigInteger param0) {
        Function function = new Function("demandCurve", 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getUserBalance(String _userAddress) {
        Function function = new Function("getUserBalance", 
                Arrays.<Type>asList(new Address(_userAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> balanceCurve(BigInteger param0) {
        Function function = new Function("balanceCurve", 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List> getSecondBalanceCurve() {
        Function function = new Function("getSecondBalanceCurve", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray32<Int256>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<List> getThirdBalanceCurve() {
        Function function = new Function("getThirdBalanceCurve", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray32<Int256>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<TransactionReceipt> updateBalanceBasedOnDeviation(BigInteger _index, BigInteger difference) {
        Function function = new Function(
                "updateBalanceBasedOnDeviation", 
                Arrays.<Type>asList(new Uint256(_index),
                new Int256(difference)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getPricePerkWh() {
        Function function = new Function("getPricePerkWh", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List> getThirdProductionCurve() {
        Function function = new Function("getThirdProductionCurve", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray32<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<List> getSecondDemandCurve() {
        Function function = new Function("getSecondDemandCurve", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray32<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<TransactionReceipt> updateCurrentIndex(BigInteger _newIndex) {
        Function function = new Function(
                "updateCurrentIndex", 
                Arrays.<Type>asList(new Uint256(_newIndex)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getFirstDemandCurve() {
        Function function = new Function("getFirstDemandCurve", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray32<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<TransactionReceipt> setCurveForConsumer(String consumerAddress, Boolean isStartSimulation, List<BigInteger> _firstExpectedConsumption, List<BigInteger> _secondExpectedConsumption, List<BigInteger> _thirdExpectedConsumption) {
        Function function = new Function(
                "setCurveForConsumer", 
                Arrays.<Type>asList(new Address(consumerAddress),
                new org.web3j.abi.datatypes.Bool(isStartSimulation), 
                new StaticArray32<Uint256>(
                        org.web3j.abi.Utils.typeMap(_firstExpectedConsumption, Uint256.class)),
                new StaticArray32<Uint256>(
                        org.web3j.abi.Utils.typeMap(_secondExpectedConsumption, Uint256.class)),
                new StaticArray32<Uint256>(
                        org.web3j.abi.Utils.typeMap(_thirdExpectedConsumption, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateProductionAndBalanceCurve(List<BigInteger> _firstExpectedConsumption, List<BigInteger> _secondExpectedConsumption, List<BigInteger> _thirdExpectedConsumption) {
        Function function = new Function(
                "updateProductionAndBalanceCurve", 
                Arrays.<Type>asList(new StaticArray32<Uint256>(
                        org.web3j.abi.Utils.typeMap(_firstExpectedConsumption, Uint256.class)),
                new StaticArray32<Uint256>(
                        org.web3j.abi.Utils.typeMap(_secondExpectedConsumption, Uint256.class)),
                new StaticArray32<Uint256>(
                        org.web3j.abi.Utils.typeMap(_thirdExpectedConsumption, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getFirstProductionCurve() {
        Function function = new Function("getFirstProductionCurve", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray32<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<List> getThirdDemandCurve() {
        Function function = new Function("getThirdDemandCurve", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray32<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<TransactionReceipt> getCurve(BigInteger _index, List<BigInteger> _baselineConsumption, BigInteger weiValue) {
        Function function = new Function(
                "getCurve", 
                Arrays.<Type>asList(new Uint256(_index),
                new StaticArray<Uint256>(
                        org.web3j.abi.Utils.typeMap(_baselineConsumption, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> substractToken(String _user, BigInteger _amount) {
        Function function = new Function(
                "substractToken", 
                Arrays.<Type>asList(new Address(_user),
                new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateDemandAndBalanceCurve(List<BigInteger> _firstExpectedConsumption, List<BigInteger> _secondExpectedConsumption, List<BigInteger> _thirdExpectedConsumption) {
        Function function = new Function(
                "updateDemandAndBalanceCurve", 
                Arrays.<Type>asList(new StaticArray32<Uint256>(
                        org.web3j.abi.Utils.typeMap(_firstExpectedConsumption, Uint256.class)),
                new StaticArray32<Uint256>(
                        org.web3j.abi.Utils.typeMap(_secondExpectedConsumption, Uint256.class)),
                new StaticArray32<Uint256>(
                        org.web3j.abi.Utils.typeMap(_thirdExpectedConsumption, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getSecondProductionCurve() {
        Function function = new Function("getSecondProductionCurve", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray32<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<List> getFirstBalanceCurve() {
        Function function = new Function("getFirstBalanceCurve", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray32<Int256>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<TransactionReceipt> calculateBalanceCurve() {
        Function function = new Function(
                "calculateBalanceCurve", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> productionCurve(BigInteger param0) {
        Function function = new Function("productionCurve", 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> registerProducer(String _name, String _homeAddress, String _CNP, List<BigInteger> _firstExpectedProduction, List<BigInteger> _secondExpectedProduction, List<BigInteger> _thirdExpectedProduction) {
        Function function = new Function(
                "registerProducer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_homeAddress), 
                new org.web3j.abi.datatypes.Utf8String(_CNP), 
                new StaticArray32<Uint256>(
                        org.web3j.abi.Utils.typeMap(_firstExpectedProduction, Uint256.class)),
                new StaticArray32<Uint256>(
                        org.web3j.abi.Utils.typeMap(_secondExpectedProduction, Uint256.class)),
                new StaticArray32<Uint256>(
                        org.web3j.abi.Utils.typeMap(_thirdExpectedProduction, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<GridContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(GridContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<GridContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(GridContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static GridContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new GridContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static GridContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new GridContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class NewCurveEventResponse {
        public List<BigInteger> _curve;
    }

    public static class GenerateAddressEventResponse {
        public String _address;

        public String msg_sender;
    }

    public static class EthergyAddressEventResponse {
        public String _addr;
    }
}
